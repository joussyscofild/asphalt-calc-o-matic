
import { useState } from 'react';
import { Page } from '@/components/admin/pages/types';
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";

interface UsePageEditingProps {
  pages: Page[];
  setPages: React.Dispatch<React.SetStateAction<Page[]>>;
}

export const usePageEditing = ({ pages, setPages }: UsePageEditingProps) => {
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [currentPage, setCurrentPage] = useState<Page | null>(null);
  const [pageContent, setPageContent] = useState('');
  
  const handleCreatePage = () => {
    const newPage: Page = {
      id: '', // Will be generated by Supabase
      title: 'New Page',
      slug: 'new-page-' + Date.now().toString().slice(-4),
      status: 'draft',
      content: '<h1>New Page</h1><p>Add your content here.</p>',
      created: new Date().toISOString().split('T')[0],
      lastModified: new Date().toISOString().split('T')[0],
    };
    
    setCurrentPage(newPage);
    setPageContent(newPage.content);
    setIsEditDialogOpen(true);
  };
  
  const handleEditPage = (page: Page) => {
    setCurrentPage(page);
    setPageContent(page.content);
    setIsEditDialogOpen(true);
  };
  
  const handleSavePage = async () => {
    if (!currentPage) return;
    
    const now = new Date().toISOString();
    const today = now.split('T')[0];
    
    try {
      if (currentPage.id) {
        const { error } = await supabase
          .from('custom_pages')
          .update({
            title: currentPage.title,
            slug: currentPage.slug,
            content: pageContent,
            status: currentPage.status,
            last_modified: now,
          })
          .eq('id', currentPage.id);
        
        if (error) throw error;
        
        setPages(pages.map(p => 
          p.id === currentPage.id 
            ? {...currentPage, content: pageContent, lastModified: today} 
            : p
        ));
        
        toast({
          title: "Page updated",
          description: `"${currentPage.title}" has been updated successfully.`,
        });
      } else {
        const { data, error } = await supabase
          .from('custom_pages')
          .insert({
            title: currentPage.title,
            slug: currentPage.slug,
            content: pageContent,
            status: currentPage.status,
          })
          .select();
        
        if (error) throw error;
        
        if (data && data[0]) {
          const newPage: Page = {
            id: data[0].id,
            title: data[0].title,
            slug: data[0].slug,
            status: data[0].status as 'published' | 'draft',
            content: data[0].content,
            created: new Date(data[0].created_at).toISOString().split('T')[0],
            lastModified: new Date(data[0].last_modified).toISOString().split('T')[0],
          };
          
          setPages([newPage, ...pages]);
          
          toast({
            title: "Page created",
            description: `"${newPage.title}" has been created successfully.`,
          });
        }
      }
      
      setIsEditDialogOpen(false);
    } catch (error) {
      console.error('Error saving page:', error);
      toast({
        title: "Error saving page",
        description: "There was a problem saving the page. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!currentPage) return;
    
    const title = e.target.value;
    let slug = title.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '');
    
    setCurrentPage({
      ...currentPage,
      title,
      slug
    });
  };
  
  const handleSlugChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!currentPage) return;
    
    const slug = e.target.value.toLowerCase().replace(/[^\w-]+/g, '');
    
    setCurrentPage({
      ...currentPage,
      slug
    });
  };
  
  return {
    isEditDialogOpen,
    currentPage,
    pageContent,
    handleCreatePage,
    handleEditPage,
    handleSavePage,
    handleTitleChange,
    handleSlugChange,
    setPageContent,
    setIsEditDialogOpen
  };
};
